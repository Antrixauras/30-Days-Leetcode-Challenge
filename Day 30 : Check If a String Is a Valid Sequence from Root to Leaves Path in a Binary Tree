Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence 
in such binary tree. 
We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a 
path results in a sequence in the given binary tree.

Example 1:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]
Output: true
Explanation: 
The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). 
Other valid sequences are: 
0 -> 1 -> 1 -> 0 
0 -> 0 -> 0

Example 2:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]
Output: false 
Explanation: The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.

Example 3:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]
Output: false
Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool func(TreeNode* root,int n,int pos,vector<int> arr)
    {
        if(root==NULL)
            return false;
        else if(pos==n)
            return false;
        else if(root->val!=arr[pos])
            return false;
        else if(root->left==NULL&&root->right==NULL&&pos==n-1)
            return true;
        return (func(root->left,n,pos+1,arr)||func(root->right,n,pos+1,arr));
    }
    bool isValidSequence(TreeNode* root, vector<int>& arr) {
        int n=arr.size();
        int pos=0;
        return func(root,n,pos,arr);
    }
};
